#summary Papers we should read for Unladen Swallow

Here, "phase one" refers to [ProjectPlan the 2009Q1 release]; "phase two" refers to all work after that release. This list is by no means complete.


==Phase One Papers:==
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.12.918 The behaviour of efficient virtual machine interpreters on modern architectures] (Ertl & Gregg, 2001)* Argues for using some variation of direct threading for opcode dispatch, rather than a switch statement.
  * *[http://www.usenix.org/events/vee05/full_papers/p153-yunhe.pdf Virtual Machine Showdown: Stack Versus Registers] (Shi, Gregg, Beatty & Ertl, 2005)* Experiment in converting the JVM from a stack-based design to a register architecture. They observed a 32% speed-up in their benchmarks due to this change.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.8546 The Structure and Performance of Interpreters] (Romer et al, 1996)* Comparison of a variety of high- and low-level interpreters. May be somewhat out of date.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.59.1271 Context Threading: A Flexible and Efficient Dispatch Technique for Virtual Machine Interpreters] (Berndl et al, 2005)* An enhancement to the direct threading approach advocated by Ertl.
  * *[http://www.tecgraf.puc-rio.br/~lhf/ftp/doc/jucs05.pdf The Implementation of Lua 5.0] (Ierusalimschy, Henrique de Figueiredo & Celes, 2005)* Interesting notes on moving from a stack-based VM to a register-based VM, including benchmarks comparing just the stack vs register aspect.
  * *[http://doi.acm.org/10.1145/1534530.1534550 The Effect of Unrolling and Inlining for Python Bytecode Optimizations] (Ben Asher & Rotem, 2009)* Applies a lot of traditional optimizations to Python bytecode, with some good results. Complementary to the approach we're taking. Their source code is available from [http://code.google.com/p/unladen-swallow/downloads/list our Downloads page].


==Phase Two Papers:==
  * [http://lambda-the-ultimate.org/node/3159]: *[http://research.microsoft.com/apps/pubs/default.aspx?id=76524 Verifying Compiler Transformations for Concurrent Programs]*: When we start really optimizing Python programs, we'll want to verify that our optimizations preserve our memory model.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.30.1652 The Design and Implementation of the SELF Compiler, an Optimizing Compiler for Object-Oriented Programming Languages] (Chambers, 1992)*
  * *[http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-07-12.pdf Making the Compilation “Pipeline” Explicit: Dynamic Compilation Using Trace Tree Serialization] (Gal et al, 2007)*
  * *[http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-07-10.pdf Efficient Just-In-Time Execution of Dynamically Typed Languages Via Code Specialization Using Precise Runtime Type Inference] (Chang et al, 2007)*
  * *[http://www.ics.uci.edu/~franz/Site/pubs-pdf/C44Prepub.pdf One Method at a Time is Quite a Waste of Time] (Gal, Bebenita & Franz, 2007)*
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1558 Iterative type analysis and extended message splitting: Optimizing dynamically-typed object-oriented programs] (Chambers & Ungar, 1990)*
  * *[http://portal.acm.org/citation.cfm?id=800542 Efficient implementation of the smalltalk-80 system] (Deutsch & Schiffman, 1984)*
  * *[http://research.sun.com/self/papers/urs-thesis.html Adaptive optimization for Self: Reconciling High Performance with Exploratory Programming] (Hölzle, 1994)*
    * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.4430 Optimizing Dynamically-Typed Object-Oriented Languages With Polymorphic Inline Caches] (Hölzle, Chambers & Ungar, 1991)* Long-form paper that originally introduced the type feedback system in Hölzle, 1994.
    * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.49.1810 Debugging Optimized Code with Dynamic Deoptimization] (Hölzle, Chambers & Ungar, 1992)* Long-form paper of the section of Hölzle, 1994 that deals with dynamically deoptimizing SELF code for debugging purposes.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.1419 Type Feedback vs. Concrete Type Inference - A Comparison of Optimization Techniques for Object-Oriented Languages] (Agesen & Hölzle, 1995)* A comparison of type inference and type feedback, and analyzing how they can be mutually beneficial.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.30.4066 Measurement and Application of Dynamic Receiver Class Distributions] (Garrett et al, 1994)* "We apply dynamic proﬁle information to determine the dynamic execution frequency distributions of the classes of receivers at call sites. We show that these distributions are heavily skewed towards the most commonly occurring receiver class across several different languages. Moreover, we show that the distributions are stable across program inputs, from one version of a program to another, and even to some extent across programs that share library code."
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.1043 Towards Better Inlining Decisions Using Inlining Trials] (Dean & Chambers, 1994)* Improving compile time by keeping a database of which inlining operations actually produced a benefit.
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.51.4406 Strongtalk: Typechecking Smalltalk for a Production Environment] (Bracha & Griswold, 1993)*
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.7437 Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis] (Dean, Grove & Chambers, 1994)*
  * *[http://portal.acm.org/citation.cfm?id=646153.679533 The Cartesian Product Algorithm: Simple and Precise Type Inference Of Parametric Polymorphism] (Agesen, 1995)*
  * *[http://www.ocf.berkeley.edu/~bac/thesis.pdf Localized Type Inference of Atomic Types in Python] (Cannon, 2005)* A cautionary tale of an attempt at type inference in Python. Things to think about once/if we start looking at type inference for Python.


==Garbage Collection:==
  * *[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.1065 Java without the coffee breaks: A nonintrusive multiprocessor garbage collector] (Bacon et al, 2001)* Presents Recycler, a reference counting GC system we might reuse for Python.
  * *[http://cs.anu.edu.au/~Robin.Garner/mmtk-guide.pdf MMTk: The Memory Management Toolkit] (Blackburn et al, 2006)* The garbage collector used by JikesRVM.
  * *[http://portal.acm.org/citation.cfm?id=1028984&coll=GUIDE&dl=GUIDE&CFID=13233945&CFTOKEN=85731901 MC2: high-performance garbage collection for memory-constrained environments] (Sachindran et al, 2004)* Describes "Memory-Constrained Copying" technique.
  * *[http://portal.acm.org/citation.cfm?id=1134023&coll=GUIDE&dl=GUIDE&CFID=13233945&CFTOKEN=85731901 The Compressor: concurrent, incremental, and parallel compaction] (Kermany & Petrank, 2006)* Another algorithm implemented on JikesRVM, claims to be "the most efficient compactor known today".
  * *[http://portal.acm.org/citation.cfm?doid=949343.949329 An on-the-fly mark and sweep garbage collector based on sliding views] (Azatchi et al, 2003)* A collector designed to minimize pause times. This one is worth reading if you are interested in the details of the sliding window technique, mutator synchronization, and write barriers.
  * *[http://portal.acm.org/citation.cfm?id=362422.362480&type=series A generational mostly-concurrent garbage collector] (Printezis & Detlefs, 2000)* Worth reading for its description of card marking algorithms.


==Regular Expressions:==
  * [http://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html Overview of Chrome's new regex engine]
  * [http://webkit.org/blog/214/introducing-squirrelfish-extreme/ Pointer to Squirrelfish Extreme's regex JIT]
  * [http://209.85.173.132/search?q=cache:XQrcPV-4kngJ:swtch.com/~rsc/regexp/regexp1.html+thompson+NFA&cd=1&hl=en&ct=clnk&gl=us Article advocating the use of Thompson NFAs for regex implementations]
  * *[http://www.usenix.org/event/woot08/tech/full_papers/drewry/drewry.pdf Insecure Context Switching: Inoculating Regular Expressions for Survivability] (Drewry & Ormandy, 2008)*


==Related Work, Related Results:==
  * [http://weblogs.mozillazine.org/roadmap/archives/2008/08/tracemonkey_javascript_lightsp.html Results from the TraceMonkey JIT]. Includes comparison with the previous non-JIT version.
  * [http://webkit.org/blog/214/introducing-squirrelfish-extreme/ Results from the SquirrelFish JIT]. Includes comparison with the previous non-JIT version.
  * [http://chrome.blogspot.com/2009/03/google-chrome-has-new-beta_17.html Recent work to improve V8 performance]. Only JIT/JIT comparisons, no non-JIT/JIT comparison.