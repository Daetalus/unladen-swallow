#summary Unladen Swallow Releases

Unladen Swallow is released every three months, with bug-fix releases in between as needed.

= 2009Q1 =

The first release. Unladen Swallow 2009Q1 is based on CPython 2.6.1. This release is primarily a collection of tweaks to 2.6.1, most of which are now available in mainline Python trunk. What are not currently available are in the process of being pushed upstream.

== Performance ==

We recommend building Unladen Swallow with 64-bit mode for maximum performance. The following timings are comparing virgin Python 2.6.1 against Unladen Swallow 2009Q1 in 64-bit mode. Compiled with gcc 4.3.1 on Intel Core 2 Duo machines. See the [Benchmarks] page for a description of each benchmark below. If you have access to gcc 4.4, we highly recommend using the FDO support (via `-fprofile-generate` and `-fprofile-use`). We have found that training it on 2to3, Django and SlowSpitfire (via `test.py`) adds additional 10-30% percent performance, depending on the benchmark. We have not included those improvements in our results since gcc 4.4 is not widely available.

Note on the benchmark names: the SlowFoo benchmarks are pure-Python versions. So SlowPickle is a pure-Python version of Pickle, which uses the `cPickle` module.

The performance improvements are calculated using `((new - old) / new)`.

2to3:<br>
Min: 22.888 -> 20.299: 12.75% faster<br>
Avg: 22.926 -> 20.329: 12.77% faster<br>
Significant (t=145.835478, a=0.95)

Django:<br>
Min: 0.596 -> 0.554: 7.52% faster<br>
Avg: 0.598 -> 0.557: 7.43% faster<br>
Significant (t=297.475166, a=0.95)

Pickle (complex):<br>
Min: 1.023 -> 0.409: 150.36% faster<br>
Avg: 1.053 -> 0.410: 157.17% faster<br>
Significant (t=1102.029662, a=0.95)

Pickle (simple):<br>
Min: 1.223 -> 0.868: 40.83% faster<br>
Avg: 1.229 -> 0.876: 40.20% faster<br>
Significant (t=695.483070, a=0.95)

PyBench:<br>
Min: 46961 -> 38795: 21.05% faster<br>
Avg: 47775 -> 39635: 20.54% faster

SlowPickle:<br>
Min: 1.236 -> 1.072: 15.22% faster<br>
Avg: 1.239 -> 1.076: 15.17% faster<br>
Significant (t=497.615245, a=0.95)

SlowSpitfire:<br>
Min: 0.762 -> 0.670: 13.87% faster<br>
Avg: 0.764 -> 0.671: 13.80% faster<br>
Significant (t=452.978688, a=0.95)

SlowUnpickle:<br>
Min: 0.606 -> 0.528: 14.63% faster<br>
Avg: 0.607 -> 0.530: 14.60% faster<br>
Significant (t=581.549445, a=0.95)

Unpickle (complex):<br>
Min: 0.738 -> 0.536: 37.71% faster<br>
Avg: 0.746 -> 0.547: 36.24% faster<br>
Significant (t=122.112665, a=0.95)

Unpickle (simple):<br>
Min: 0.756 -> 0.486: 55.60% faster<br>
Avg: 0.774 -> 0.493: 56.91% faster<br>
Significant (t=331.578243, a=0.95)

== Feedback-Directed Optimization ==

This table summarizes the benefits we saw from using gcc 4.4's feedback-directed optimizations to improve Python performance. We experimented with a number of training loads. Both training and measurement was done with `perf.py --rigorous`. We observed similar benefits across both 32-bit and 64-bit Python.

In these charts, the columns indicate the training loads (SlowFoo means all the "slow" benchmarks: SlowSpitfire, SlowPickle, SlowUnpickle). "MEAN-PYBENCH-C" indicates the mean of the benchmarks if PyBench and the cPickle benchmarks are excluded. The percentage values are improvements over the baseline; negative numbers indicate performance regressions.

|| || Training=SlowSpitfire || Training=2to3 || Training=PyBench || Training=2to3,Django,SlowFoo ||
|| 2to3 ||4%||7%||5%||6%||
|| Django ||10%||10%||7%||13%||
|| Pickle ||-4%||0%||-1%||-1%||
||PyBench||-6%||2%||5%||-7%||
||SlowPickle||9%||4%||9%||8%||
||SlowSpitfire||32%||23%||27%||25%||
||SlowUnpickle||10%||4%||15%||12%||
||Unpickle||0%||6%||1%||6%||
|| ||
||MEAN||6.88%||7.00%||8.50%||7.75%||
||MEAN-PYBENCH||8.71%||7.71%||9.00%||9.86%||
||MEAN-PYBENCH-C||13.00%||9.60%||12.60%||12.80%||


The results above, removing PyBench and any benchmarks that stress C-language extension modules.
|| || Training=SlowSpitfire || Training=2to3 || Training=PyBench || Training=2to3,Django,SlowFoo ||
|| 2to3 ||4%||7%||5%||6%||
|| Django ||10%||10%||7%||13%||
||SlowPickle||9%||4%||9%||8%||
||SlowSpitfire||32%||23%||27%||25%||
||SlowUnpickle||10%||4%||15%||12%||
|| ||
||GEOMEAN||10.29%||7.62%||10.50%||11.34%||