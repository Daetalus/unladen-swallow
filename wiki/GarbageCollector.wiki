#Garbage Collection Plan

= Garbage Collection Development Plan =

== Goals ==

The primary goal is to produce a workable concurrent garbage collector that can be used for an optimized Python. A secondary goal is to make the collector independent enough from Python to be usable for other languages.

 * Built on top of LLVM using the LLVM GC primitives (where appropriate).
 * Fully open-source.
 * Written in C++.
 * "Java-like" object model and semantics.
 * Able to operate in multithreaded environments.
 * A flexible architecture that promotes innovation and incremental improvements from external contributors.

Note: The [http://chaoticjava.com/posts/parallel-and-concurrent-garbage-collectors/ terminology] used in the garbage collector literature is somewhat inconsistent with respect to concurrency. In this document, we will refer to a "concurrent" GC as one that runs at the same time as the mutator threads, whereas a "parallel" GC is one in which there are multiple collector threads.

== Overall Architecture ==
